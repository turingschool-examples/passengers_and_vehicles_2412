require './lib/passenger'
require './lib/vehicle'
require './lib/park'

RSpec.describe Park do
  it 'can add a vehicle to the park' do
    park = Park.new("Yellowstone", 20)
    vehicle1 = Vehicle.new("2001", "Honda", "Civic")

    park.add_vehicle(vehicle1)

    expect(park.vehicles).to include(vehicle1)

  end

  it 'can list all vehicles that entered the park' do
    park = Park.new("Yellowstone", 20)
    vehicle1 = Vehicle.new("2001", "Honda", "Civic")
    vehicle2 = Vehicle.new("1985", "Toyota", "Tacoma")

    park.add_vehicle(vehicle1)
    park.add_vehicle(vehicle2)
    

    expect(park.vehicles_in_park).to eq([vehicle1, vehicle2])

  end

  it 'lists all passengers in the park' do
    park = Park.new("Yellowstone", 20)
    vehicle1 = Vehicle.new("2001", "Honda", "Civic")
    vehicle2 = Vehicle.new("1985", "Toyota", "Tacoma")
    passenger1 = Passenger.new({"name" => "Charlie", "age" => 18})
    passenger2 = Passenger.new({"name" => "Jude", "age" => 20})
    passenger3 = Passenger.new({"name" => "Taylor", "age" => 12})
    passenger4 = Passenger.new({"name" => "Gabe", "age" => 98})

    vehicle1.add_passenger(passenger1)
    vehicle1.add_passenger(passenger2)
    vehicle1.add_passenger(passenger3)
    vehicle2.add_passenger(passenger4)

    park.add_vehicle(vehicle1)
    park.add_vehicle(vehicle2)

    expect(park.passengers.map(&:name)).to include("Charlie", "Jude", "Taylor", "Gabe")

  end

  it 'calculates revenue generated by adult passengers' do
    park = Park.new("Yellowstone", 20)
    vehicle1 = Vehicle.new("2001", "Honda", "Civic")
    vehicle2 = Vehicle.new("1985", "Toyota", "Tacoma")
    passenger1 = Passenger.new({"name" => "Charlie", "age" => 18})
    passenger2 = Passenger.new({"name" => "Jude", "age" => 20})
    passenger3 = Passenger.new({"name" => "Taylor", "age" => 12})
    passenger4 = Passenger.new({"name" => "Gabe", "age" => 98})

    vehicle1.add_passenger(passenger1)
    vehicle1.add_passenger(passenger2)
    vehicle1.add_passenger(passenger3)
    vehicle2.add_passenger(passenger4)

    park.add_vehicle(vehicle1)
    park.add_vehicle(vehicle2)

    expect(park.revenue).to eq(60) 

  end

  it 'counts passengers in the park' do
    park = Park.new("Yellowstone", 20)
    vehicle1 = Vehicle.new("2001", "Honda", "Civic")
    vehicle2 = Vehicle.new("1985", "Toyota", "Tacoma")
    passenger1 = Passenger.new({"name" => "Charlie", "age" => 18})
    passenger2 = Passenger.new({"name" => "Jude", "age" => 20})
    passenger3 = Passenger.new({"name" => "Taylor", "age" => 12})
    passenger4 = Passenger.new({"name" => "Gabe", "age" => 98})

    vehicle1.add_passenger(passenger1)
    vehicle1.add_passenger(passenger2)
    vehicle1.add_passenger(passenger3)
    vehicle2.add_passenger(passenger4)

    park.add_vehicle(vehicle1)
    park.add_vehicle(vehicle2)

    expect(park.passengers.size).to eq(4)

  end

  it 'list all patron names alphabetically' do
    park = Park.new("Yellowstone", 20)
    vehicle1 = Vehicle.new("2001", "Honda", "Civic")
    vehicle2 = Vehicle.new("1985", "Toyota", "Tacoma")
    passenger1 = Passenger.new({"name" => "Charlie", "age" => 18})
    passenger2 = Passenger.new({"name" => "Jude", "age" => 20})
    passenger3 = Passenger.new({"name" => "Taylor", "age" => 12})
    passenger4 = Passenger.new({"name" => "Gabe", "age" => 98})

    vehicle1.add_passenger(passenger1)
    vehicle1.add_passenger(passenger2)
    vehicle1.add_passenger(passenger3)
    vehicle2.add_passenger(passenger4)

    park.add_vehicle(vehicle1)
    park.add_vehicle(vehicle2)

    expect(park.patron_names).to eq(["Charlie", "Gabe", "Jude", "Taylor"])

  end

  it 'lists all minor patron names alphabetically' do
    park = Park.new("Yellowstone", 20)
    vehicle1 = Vehicle.new("2001", "Honda", "Civic")
    vehicle2 = Vehicle.new("1985", "Toyota", "Tacoma")
    passenger1 = Passenger.new({"name" => "Charlie", "age" => 18})
    passenger2 = Passenger.new({"name" => "Jude", "age" => 20})
    passenger3 = Passenger.new({"name" => "Taylor", "age" => 12})
    passenger4 = Passenger.new({"name" => "Gabe", "age" => 98})

    vehicle1.add_passenger(passenger1)
    vehicle1.add_passenger(passenger2)
    vehicle1.add_passenger(passenger3)
    vehicle2.add_passenger(passenger4)

    park.add_vehicle(vehicle1)
    park.add_vehicle(vehicle2)

    expect(park.minors).to eq(["Taylor"])

  end

  it 'lists all adult patron names alphabetically' do
    park = Park.new("Yellowstone", 20)
    vehicle1 = Vehicle.new("2001", "Honda", "Civic")
    vehicle2 = Vehicle.new("1985", "Toyota", "Tacoma")
    passenger1 = Passenger.new({"name" => "Charlie", "age" => 18})
    passenger2 = Passenger.new({"name" => "Jude", "age" => 20})
    passenger3 = Passenger.new({"name" => "Taylor", "age" => 12})
    passenger4 = Passenger.new({"name" => "Gabe", "age" => 98})

    vehicle1.add_passenger(passenger1)
    vehicle1.add_passenger(passenger2)
    vehicle1.add_passenger(passenger3)
    vehicle2.add_passenger(passenger4)

    park.add_vehicle(vehicle1)
    park.add_vehicle(vehicle2)

    expect(park.adults).to eq(["Charlie", "Gabe", "Jude"])
  end
end